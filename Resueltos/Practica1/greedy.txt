13.a.
Recorriendo de izquierda a derecha, de estar ambos multiconjuntos ordenados, el algoritmo para encontrar la maxima cantidad de parejas es el siguiente:

Sea i un indice al principio del arreglo A, y j del arreglo B. Si |A[i] - B[j]| <= 1, entonces +1 cantidad de parejas y i++ j++. Si no, el menor de A[i] y B[j]++ ese indice.

i = 0;
j = 0;
parejas = 0;
while(i < A.size() && j < B.size()) {
    if (|A[i] - B[j]| <= 1) {
        parejas++;
        i++;
        j++;
    } else if (A[i] < B[j]) {
        i++;
    } else {
        j++;
    }
}

// TODO DEMOSTRAR

14.

a. La estrategia golosa es ordenar el multiconjunto de menor a mayor, y luego realizar las sumas en orden. Esto tiene en cuenta que, como la suma de los elementos x e y tiene costo x + y, siempre quiero sumar la menor cantidad posible a la vez. Es decir, en cada paso del subproblema, de entre los numeros restantes por sumar busco el mas pequeÃ±o.

b. // TODO DEMOSTRAR

c. Claro, el algoritmo termina siendo O(n log n) ya que es el costo de ordenar el arreglo multiconjunto. Por ejemplo, un vector. Luego, el algoritmo suma de izquierda a derecha con complejidad O(n). 

Sea v el vector multiconjunto:

if (v.size() == 0) return 0;
mergeSort(v); // O(n log n)
costo = v[0];
res = 0;
i = 1;
while (i < v.size()) {
    costo += v[i];
    res += costo;
}
return res;

15.
a. proc subCursos (in E: conj(int), in C: conj(pair(int, int)), out res: pair(conj(int), conj(int))) {
    PRE = {paratodo pair(int, int) en C, ambos elementos deben de estar en E ^ si (a, b) pertenece a C entonces (b, a) no pertenece a C}

    POST = {res.first U res.second = E ^ (paratodo int x) x pertenece a res.first sii no pertenece a res.second ^ si x pertenece a res.first no existe y en res.first tal que (x,y) pertenece a C y lo mismo con res.second}
}

b. TODO

Observemos que siempre habra solucion al problema para cualquier instancia. Hagamos induccion en la cantidad de estudiantes.

Caso Base: Hay 1 solo estudiante
Simplemente divido el grupo de 1 estudiante en otro de 1 estudiante y otro de ninguno, ambos con ninguna pareja de estudiantes cercanos.

Paso Inductivo: supongamos que se puedan dividir en dos un grupo de k estudiantes, cada subgrupo con <= c/2 parejas cercanas, siendo c la cantidad de relaciones totales. Veamos que tambien se puede dividir uno de k+1 estudiantes.

Tenemos que con k estudiantes, de agregar un estudiante k+1, las relaciones totales pasan a ser c' = c + i + j. Contamos cuantas son las relaciones cercanas que tiene con los estudiantes en cada subgrupo. Es decir, llamemos i a la cantidad de relaciones cercanas que tiene el estudiante k+1 con los estudiantes de A, y j con los estudiantes de B. Notemos que como las relaciones se forman de entre dos estudiantes, i y j suman exactamente la cantidad de relaciones totales en las cuales participa el estudiante k+1.

Luego, de ser i menor, lo agrego al grupo A. De ser j menor, a B.
Por hipotesis inductiva, ambos grupos tenian <= c/2 relaciones. De agregar a i, c/2 + i = (c+2i)/2 <= c + 2i <= c + i + j.

Idem lo otro.


c. TODO

16.

a.

fs(S, {w1...wn}) = S si n = 0
                 = fs(S, {w1...wn-1}) si |fs(S, {w1...wn-1})| > |fs(...|